{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"function_mixin/","text":"a.src-href { float: right; } p.attr { margin-top: 0.5em; margin-left: 1em; } p.func-header { background-color: gainsboro; border-radius: 0.1em; padding: 0.5em; padding-left: 1em; } table.field-table { border-radius: 0.1em } Function mixin sqlalchemy_function. FunctionMixin class sqlalchemy_function. FunctionMixin ( parent=None, func=None, args=[], kwargs={} ) [source] A mixin for 'Function models'. When called, a Function model executes its function, passing in its parent (if applicable) and its args and kwargs. Parameters: parent : usually a database model or None, default=None The Function model's parent is usually a database model which subclasses a sqlalchemy.ext.declarative.declarative_base() . func : callable or None, default=None The function which the Function model will execute when called. args : iterable, default=[] Arguments which the Function model will pass into its func when called. kwargs : dict, default={} Keyword arguments which the Function model will pass into its func when called. Attributes: parent : usually a database model of None Set from the parent parameter. func : callable sqlalchemy.PickleType Set from the func parameter. args : sqlalchemy_mutable.MutableListType Set from the args parameter. kwargs : sqlalchemy_mutable.MutableDictType Set from the kwargs parameter. Examples In the setup, we create a SQLAlchemy session, define a Parent model subclassing FunctionRelator , and a Function model subclassing FunctionMixin . from sqlalchemy_function import FunctionMixin, FunctionRelator from sqlalchemy import create_engine, Column, ForeignKey, Integer, String from sqlalchemy.orm import relationship, sessionmaker, scoped_session from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.ext.orderinglist import ordering_list # standard session creation engine = create_engine('sqlite:///:memory:') session_factory = sessionmaker(bind=engine) Session = scoped_session(session_factory) session = Session() Base = declarative_base() # define a Parent model with the FunctionRelator class Parent(FunctionRelator, Base): __tablename__ = 'parent' id = Column(Integer, primary_key=True) # Fuction models must reference their parent with a `parent` attribute functions = relationship('Function', backref='parent') # define a Function model with the FunctionMixin class Function(FunctionMixin, Base): __tablename__ = 'function' id = Column(Integer, primary_key=True) parent_id = Column(Integer, ForeignKey('parent.id')) Base.metadata.create_all(engine) We can now store and later call functions as follows. def foo(parent, *args, **kwargs): print('My parent is', parent) print('My args are', args) print('My kwargs are', kwargs) return 'return value' parent = Parent() function = Function( parent, func=foo, args=['hello world'], kwargs={'goodbye': 'moon'} ) parent.functions[0]() Out: My parent is <__main__.Parent object at 0x7f2bb5c12518> My args are ('hello world',) My kwargs are {'goodbye': 'moon'} 'return value' Methods register ( cls, func ) [source] Class method which registers a function with the Function model. This simplifies the syntax for creating Function models and associating them with their parents. Parameters: func : callable The registered function. Returns: func : callable Original func parameter. Examples Follow the setup above. @Function.register def foo(parent, *args, **kwargs): print('My parent is', parent) print('My args are', args) print('My kwargs are', kwargs) return 'return value' parent = Parent() Function.foo(parent, 'hello world', goodbye='moon') parent.functions[0]() Out: My parent is <__main__.Parent object at 0x7f2bc4269588> My args are ('hello world',) My kwargs are {'goodbye': 'moon'} 'return value' __call__ ( self ) [source] Call self.func , passing in self.parent (if applicable) and *self.args, **self.kwargs . Note. If the arguments or keyword arguments contain database models, they will be 'unshelled' when they are passed into the function. See https://dsbowen.github.io/sqlalchemy-mutable for more detail. Returns: output : Output of self.func .","title":"Function mixin"},{"location":"function_mixin/#function-mixin","text":"","title":"Function mixin"},{"location":"function_mixin/#sqlalchemy_functionfunctionmixin","text":"class sqlalchemy_function. FunctionMixin ( parent=None, func=None, args=[], kwargs={} ) [source] A mixin for 'Function models'. When called, a Function model executes its function, passing in its parent (if applicable) and its args and kwargs. Parameters: parent : usually a database model or None, default=None The Function model's parent is usually a database model which subclasses a sqlalchemy.ext.declarative.declarative_base() . func : callable or None, default=None The function which the Function model will execute when called. args : iterable, default=[] Arguments which the Function model will pass into its func when called. kwargs : dict, default={} Keyword arguments which the Function model will pass into its func when called. Attributes: parent : usually a database model of None Set from the parent parameter. func : callable sqlalchemy.PickleType Set from the func parameter. args : sqlalchemy_mutable.MutableListType Set from the args parameter. kwargs : sqlalchemy_mutable.MutableDictType Set from the kwargs parameter.","title":"sqlalchemy_function.FunctionMixin"},{"location":"function_mixin/#examples","text":"In the setup, we create a SQLAlchemy session, define a Parent model subclassing FunctionRelator , and a Function model subclassing FunctionMixin . from sqlalchemy_function import FunctionMixin, FunctionRelator from sqlalchemy import create_engine, Column, ForeignKey, Integer, String from sqlalchemy.orm import relationship, sessionmaker, scoped_session from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.ext.orderinglist import ordering_list # standard session creation engine = create_engine('sqlite:///:memory:') session_factory = sessionmaker(bind=engine) Session = scoped_session(session_factory) session = Session() Base = declarative_base() # define a Parent model with the FunctionRelator class Parent(FunctionRelator, Base): __tablename__ = 'parent' id = Column(Integer, primary_key=True) # Fuction models must reference their parent with a `parent` attribute functions = relationship('Function', backref='parent') # define a Function model with the FunctionMixin class Function(FunctionMixin, Base): __tablename__ = 'function' id = Column(Integer, primary_key=True) parent_id = Column(Integer, ForeignKey('parent.id')) Base.metadata.create_all(engine) We can now store and later call functions as follows. def foo(parent, *args, **kwargs): print('My parent is', parent) print('My args are', args) print('My kwargs are', kwargs) return 'return value' parent = Parent() function = Function( parent, func=foo, args=['hello world'], kwargs={'goodbye': 'moon'} ) parent.functions[0]() Out: My parent is <__main__.Parent object at 0x7f2bb5c12518> My args are ('hello world',) My kwargs are {'goodbye': 'moon'} 'return value'","title":"Examples"},{"location":"function_mixin/#methods","text":"register ( cls, func ) [source] Class method which registers a function with the Function model. This simplifies the syntax for creating Function models and associating them with their parents. Parameters: func : callable The registered function. Returns: func : callable Original func parameter.","title":"Methods"},{"location":"function_mixin/#examples_1","text":"Follow the setup above. @Function.register def foo(parent, *args, **kwargs): print('My parent is', parent) print('My args are', args) print('My kwargs are', kwargs) return 'return value' parent = Parent() Function.foo(parent, 'hello world', goodbye='moon') parent.functions[0]() Out: My parent is <__main__.Parent object at 0x7f2bc4269588> My args are ('hello world',) My kwargs are {'goodbye': 'moon'} 'return value' __call__ ( self ) [source] Call self.func , passing in self.parent (if applicable) and *self.args, **self.kwargs . Note. If the arguments or keyword arguments contain database models, they will be 'unshelled' when they are passed into the function. See https://dsbowen.github.io/sqlalchemy-mutable for more detail. Returns: output : Output of self.func .","title":"Examples"},{"location":"function_relator/","text":"a.src-href { float: right; } p.attr { margin-top: 0.5em; margin-left: 1em; } p.func-header { background-color: gainsboro; border-radius: 0.1em; padding: 0.5em; padding-left: 1em; } table.field-table { border-radius: 0.1em } sqlalchemy_function. FunctionRelator Base for database models with relationships to Function models. It provides automatic conversion of functions to Function models when setting attributes. Examples In the setup, we create a SQLAlchemy session, define a Parent model subclassing FunctionRelator , and a Function model subclassing FunctionMixin . from sqlalchemy_function import FunctionMixin, FunctionRelator from sqlalchemy import create_engine, Column, ForeignKey, Integer, String from sqlalchemy.orm import relationship, sessionmaker, scoped_session from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.ext.orderinglist import ordering_list # standard session creation engine = create_engine('sqlite:///:memory:') session_factory = sessionmaker(bind=engine) Session = scoped_session(session_factory) session = Session() Base = declarative_base() # define a Parent model with the FunctionRelator class Parent(FunctionRelator, Base): __tablename__ = 'parent' id = Column(Integer, primary_key=True) # Fuction models must reference their parent with a `parent` attribute functions = relationship('Function', backref='parent') # define a Function model with the FunctionMixin class Function(FunctionMixin, Base): __tablename__ = 'function' id = Column(Integer, primary_key=True) parent_id = Column(Integer, ForeignKey('parent.id')) Base.metadata.create_all(engine) We can now set the functions attribute to a callable as follows. def foo(parent, *args, **kwargs): print('My parent is', parent) print('My args are', args) print('My kwargs are', kwargs) return 'return value' parent.functions = foo # equivalent to: # parent.functions = [foo] # parent.functions = Function(func=foo) print(parent.functions) Out: [<__main__.Function object at 0x7f4e5a49c160>]","title":"Function relator"},{"location":"function_relator/#sqlalchemy_functionfunctionrelator","text":"Base for database models with relationships to Function models. It provides automatic conversion of functions to Function models when setting attributes.","title":"sqlalchemy_function.FunctionRelator"},{"location":"function_relator/#examples","text":"In the setup, we create a SQLAlchemy session, define a Parent model subclassing FunctionRelator , and a Function model subclassing FunctionMixin . from sqlalchemy_function import FunctionMixin, FunctionRelator from sqlalchemy import create_engine, Column, ForeignKey, Integer, String from sqlalchemy.orm import relationship, sessionmaker, scoped_session from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.ext.orderinglist import ordering_list # standard session creation engine = create_engine('sqlite:///:memory:') session_factory = sessionmaker(bind=engine) Session = scoped_session(session_factory) session = Session() Base = declarative_base() # define a Parent model with the FunctionRelator class Parent(FunctionRelator, Base): __tablename__ = 'parent' id = Column(Integer, primary_key=True) # Fuction models must reference their parent with a `parent` attribute functions = relationship('Function', backref='parent') # define a Function model with the FunctionMixin class Function(FunctionMixin, Base): __tablename__ = 'function' id = Column(Integer, primary_key=True) parent_id = Column(Integer, ForeignKey('parent.id')) Base.metadata.create_all(engine) We can now set the functions attribute to a callable as follows. def foo(parent, *args, **kwargs): print('My parent is', parent) print('My args are', args) print('My kwargs are', kwargs) return 'return value' parent.functions = foo # equivalent to: # parent.functions = [foo] # parent.functions = Function(func=foo) print(parent.functions) Out: [<__main__.Function object at 0x7f4e5a49c160>]","title":"Examples"}]}